{"ast":null,"code":"var _jsxFileName = \"/Users/Neo/Thinkful/qualified/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/AfterPlay.js\";\nimport React from \"react\";\nimport { minutesToDuration } from '../utils/duration';\nimport { secondsToDuration } from '../utils/duration';\n\nfunction AfterPlay({\n  data\n}) {\n  function displayHandler() {\n    if (data.label === \"Focusing\") {\n      return minutesToDuration(data.focusTimer);\n    }\n\n    if (data.label === \"On Break\") {\n      return minutesToDuration(data.breakTimer);\n    }\n  }\n\n  function ariaHandler() {\n    if (data.label === \"Focusing\") {\n      let result = data.counter / (data.focusTimer * 60) * 100; //console.log(result)\n\n      return result;\n    }\n\n    if (data.label === \"On Break\") {\n      let result = data.counter / (data.breakTimer * 60) * 100; //console.log(result)\n\n      return result;\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    \"data-testid\": \"session-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }\n  }, data.label, \" for \", displayHandler(), \" minutes\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"lead\",\n    \"data-testid\": \"session-sub-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }\n  }, secondsToDuration(data.countDownVar), \" remaining\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 11\n    }\n  }, !data.isTimerRunning ? /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 35\n    }\n  }, \"PAUSED\") : '', /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress\",\n    style: {\n      height: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress-bar\",\n    role: \"progressbar\",\n    \"aria-valuemin\": \"0\",\n    \"aria-valuemax\": \"100\",\n    \"aria-valuenow\": ariaHandler() // TODO: Increase aria-valuenow as elapsed time increases\n    ,\n    style: {\n      width: `${ariaHandler()}%`\n    } // TODO: Increase width % as elapsed time increases\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 15\n    }\n  })))));\n}\n\nexport default AfterPlay;","map":{"version":3,"sources":["/Users/Neo/Thinkful/qualified/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/AfterPlay.js"],"names":["React","minutesToDuration","secondsToDuration","AfterPlay","data","displayHandler","label","focusTimer","breakTimer","ariaHandler","result","counter","countDownVar","isTimerRunning","height","width"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,iBAAR,QAAgC,mBAAhC;AACA,SAAQC,iBAAR,QAAgC,mBAAhC;;AAEA,SAASC,SAAT,CAAmB;AAACC,EAAAA;AAAD,CAAnB,EAA0B;AAExB,WAASC,cAAT,GAAyB;AACvB,QAAGD,IAAI,CAACE,KAAL,KAAe,UAAlB,EAA6B;AAC3B,aAAOL,iBAAiB,CAACG,IAAI,CAACG,UAAN,CAAxB;AACD;;AACD,QAAGH,IAAI,CAACE,KAAL,KAAe,UAAlB,EAA6B;AAC3B,aAAOL,iBAAiB,CAACG,IAAI,CAACI,UAAN,CAAxB;AACD;AACF;;AACD,WAASC,WAAT,GAAsB;AACpB,QAAGL,IAAI,CAACE,KAAL,KAAa,UAAhB,EAA2B;AACzB,UAAII,MAAM,GAAKN,IAAI,CAACO,OAAL,IAAcP,IAAI,CAACG,UAAL,GAAgB,EAA9B,CAAD,GAAoC,GAAlD,CADyB,CAEzB;;AACA,aAAOG,MAAP;AACD;;AACD,QAAGN,IAAI,CAACE,KAAL,KAAa,UAAhB,EAA2B;AACzB,UAAII,MAAM,GAAKN,IAAI,CAACO,OAAL,IAAcP,IAAI,CAACI,UAAL,GAAgB,EAA9B,CAAD,GAAoC,GAAlD,CADyB,CAEzB;;AACA,aAAOE,MAAP;AACD;AACF;;AAGC,sBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAI,mBAAY,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAiCN,IAAI,CAACE,KAAtC,WAAkDD,cAAc,EAAhE,aADF,eAEE;AAAG,IAAA,SAAS,EAAC,MAAb;AAAoB,mBAAY,mBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,iBAAiB,CAACE,IAAI,CAACQ,YAAN,CADpB,eAFF,CADF,CADJ,eASI;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC,CAACR,IAAI,CAACS,cAAN,gBAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAvB,GAAyC,EAD1C,eAEE;AAAK,IAAA,SAAS,EAAC,UAAf;AAA0B,IAAA,KAAK,EAAE;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,SAAS,EAAC,cADZ;AAEE,IAAA,IAAI,EAAC,aAFP;AAGE,qBAAc,GAHhB;AAIE,qBAAc,KAJhB;AAKE,qBAAeL,WAAW,EAL5B,CAKgC;AALhC;AAME,IAAA,KAAK,EAAE;AAAEM,MAAAA,KAAK,EAAG,GAAEN,WAAW,EAAG;AAA1B,KANT,CAMyC;AANzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAFF,CADF,CATJ,CADA;AA2BH;;AACG,eAAeN,SAAf","sourcesContent":["import React from \"react\";\nimport {minutesToDuration} from '../utils/duration';\nimport {secondsToDuration} from '../utils/duration';\n\nfunction AfterPlay({data}){\n\n  function displayHandler(){\n    if(data.label === \"Focusing\"){\n      return minutesToDuration(data.focusTimer)\n    }\n    if(data.label === \"On Break\"){\n      return minutesToDuration(data.breakTimer)\n    }\n  }\n  function ariaHandler(){\n    if(data.label===\"Focusing\"){\n      let result = ((data.counter/(data.focusTimer*60))*100)\n      //console.log(result)\n      return result;\n    }\n    if(data.label===\"On Break\"){\n      let result = ((data.counter/(data.breakTimer*60))*100)\n      //console.log(result)\n      return result;\n    }\n  }\n\n\n    return(\n    <div>\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            <h2 data-testid=\"session-title\">{data.label} for {displayHandler()} minutes</h2>\n            <p className=\"lead\" data-testid=\"session-sub-title\">\n              {secondsToDuration(data.countDownVar)} remaining\n            </p>\n          </div>\n        </div>\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n          {!data.isTimerRunning ? <h2>PAUSED</h2> : ''}\n            <div className=\"progress\" style={{ height: \"20px\" }}>\n              <div\n                className=\"progress-bar\"\n                role=\"progressbar\"\n                aria-valuemin=\"0\"\n                aria-valuemax=\"100\"\n                aria-valuenow={ariaHandler()} // TODO: Increase aria-valuenow as elapsed time increases\n                style={{ width: `${ariaHandler()}%` }} // TODO: Increase width % as elapsed time increases\n              />\n            </div>\n          </div>\n        </div>\n    </div>\n    )\n}\n    export default AfterPlay;"]},"metadata":{},"sourceType":"module"}